package com.alpriest.energystats.ui.settings

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.expandVertically
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material.Checkbox
import androidx.compose.material.CheckboxDefaults
import androidx.compose.material.MaterialTheme
import androidx.compose.material.OutlinedTextField
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import com.alpriest.energystats.R
import com.alpriest.energystats.preview.FakeConfigManager
import com.alpriest.energystats.stores.ConfigManaging

@Composable
fun SolarStringsSettingsView(config: ConfigManaging, modifier: Modifier = Modifier) {
    val showSeparateStringsOnPowerFlowState = rememberSaveable { mutableStateOf(config.powerFlowStrings.enabled) }
    val pv1 = rememberSaveable { mutableStateOf(config.powerFlowStrings.pv1Enabled) }
    val pv2 = rememberSaveable { mutableStateOf(config.powerFlowStrings.pv2Enabled) }
    val pv3 = rememberSaveable { mutableStateOf(config.powerFlowStrings.pv3Enabled) }
    val pv4 = rememberSaveable { mutableStateOf(config.powerFlowStrings.pv4Enabled) }
    val pv1Name = rememberSaveable { mutableStateOf(config.powerFlowStrings.pv1Name) }
    val pv2Name = rememberSaveable { mutableStateOf(config.powerFlowStrings.pv2Name) }
    val pv3Name = rememberSaveable { mutableStateOf(config.powerFlowStrings.pv3Name) }
    val pv4Name = rememberSaveable { mutableStateOf(config.powerFlowStrings.pv4Name) }

    SettingsColumnWithChild(
        modifier = modifier
    ) {
        SettingsCheckbox(
            title = stringResource(R.string.show_pv_power_by_strings),
            state = showSeparateStringsOnPowerFlowState,
            onUpdate = { config.powerFlowStrings = config.powerFlowStrings.copy(enabled = it) }
        )

        AnimatedVisibility(
            visible = showSeparateStringsOnPowerFlowState.value,
            enter = expandVertically(),
            exit = shrinkVertically()
        ) {
            Column {
                SolarCheckbox(
                    stringName = "PV1",
                    toggleState = pv1,
                    onToggle = {
                        config.powerFlowStrings = config.powerFlowStrings.copy(pv1Enabled = it)
                    },
                    name = pv1Name,
                    onNameChange = {
                        config.powerFlowStrings = config.powerFlowStrings.copy(pv1Name = it)
                    }
                )

                SolarCheckbox(
                    stringName = "PV2",
                    toggleState = pv2,
                    onToggle = {
                        config.powerFlowStrings = config.powerFlowStrings.copy(pv2Enabled = it)
                    },
                    name = pv2Name,
                    onNameChange = {
                        config.powerFlowStrings = config.powerFlowStrings.copy(pv2Name = it)
                    }
                )

                SolarCheckbox(
                    stringName = "PV3",
                    toggleState = pv3,
                    onToggle = {
                        config.powerFlowStrings = config.powerFlowStrings.copy(pv3Enabled = it)
                    },
                    name = pv2Name,
                    onNameChange = {
                        config.powerFlowStrings = config.powerFlowStrings.copy(pv3Name = it)
                    }
                )

                SolarCheckbox(
                    stringName = "PV4",
                    toggleState = pv4,
                    onToggle = {
                        config.powerFlowStrings = config.powerFlowStrings.copy(pv4Enabled = it)
                    },
                    name = pv2Name,
                    onNameChange = {
                        config.powerFlowStrings = config.powerFlowStrings.copy(pv4Name = it)
                    }
                )
            }
        }

        Text("If you have multiple sets of solar panels, e.g. front/rear of your home, this will let you see the power being generated by each set. Setting takes effect on next data fetch.")
    }
}

@Composable
fun SolarCheckbox(stringName: String, toggleState: MutableState<Boolean>, onToggle: (Boolean) -> Unit, name: MutableState<String>, onNameChange: (String) -> Unit) {
    Column {
        Row(
            verticalAlignment = Alignment.CenterVertically,
        ) {
            OutlinedTextField(
                value = name.value,
                onValueChange = {
                    name.value = it
                    onNameChange(it)
                },
                label = { Text(stringName) }
            )

            Checkbox(
                checked = toggleState.value,
                onCheckedChange = {
                    toggleState.value = it
                    onToggle(it)
                },
                colors = CheckboxDefaults.colors(checkedColor = MaterialTheme.colors.primary)
            )
        }
    }
}

@Preview
@Composable
fun SolarStringsSettingsPreview() {
    SolarStringsSettingsView(config = FakeConfigManager())
}